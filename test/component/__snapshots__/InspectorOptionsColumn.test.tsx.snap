// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly with minimal/default props 1`] = `
<div
  className="jsonschema-inspector-column optional-groups"
  onClick={[Function]}
  role="presentation"
  tabIndex={-1}
>
  <div
    className="optional-group-title"
    key="group-title"
  >
    <span>
      one of
    </span>
  </div>
  <ul
    key="list-of-options"
  >
    <li
      key="[0]"
    >
      <Component
        name="Exclusive Option 1"
        onSelect={[Function]}
        optionIndexes={
          Array [
            0,
          ]
        }
        schemaGroup={
          JsonSchemaAllOfGroup {
            "entries": Array [
              JsonSchema {
                "parserConfig": Object {},
                "schema": Object {
                  "description": "Foobar",
                },
                "scope": RefScope {
                  "baseUri": null,
                  "externalRefs": Map {},
                  "internalRefs": Map {
                    "#" => [Circular],
                  },
                  "otherScopes": Array [],
                },
              },
              JsonSchemaOneOfGroup {
                "entries": Array [
                  JsonSchema {
                    "parserConfig": Object {},
                    "schema": Object {
                      "title": "Foo",
                    },
                    "scope": RefScope {
                      "baseUri": null,
                      "externalRefs": Map {},
                      "internalRefs": Map {
                        "#" => [Circular],
                      },
                      "otherScopes": Array [],
                    },
                  },
                  JsonSchemaAnyOfGroup {
                    "entries": Array [
                      JsonSchema {
                        "parserConfig": Object {},
                        "schema": Object {
                          "title": "Bar",
                        },
                        "scope": RefScope {
                          "baseUri": null,
                          "externalRefs": Map {},
                          "internalRefs": Map {
                            "#" => [Circular],
                          },
                          "otherScopes": Array [],
                        },
                      },
                      JsonSchema {
                        "parserConfig": Object {},
                        "schema": Object {
                          "description": "Baz",
                        },
                        "scope": RefScope {
                          "baseUri": null,
                          "externalRefs": Map {},
                          "internalRefs": Map {
                            "#" => [Circular],
                          },
                          "otherScopes": Array [],
                        },
                      },
                    ],
                    "settings": Object {
                      "groupTitle": "any of",
                    },
                  },
                ],
                "settings": Object {
                  "groupTitle": "one of",
                  "optionNameForIndex": [Function],
                },
              },
            ],
          }
        }
        selected={false}
      />
    </li>
    <li
      key="[1]"
    >
      <div
        className="optional-group-title"
        key="group-title"
      >
        <span>
          any of
        </span>
      </div>
      <ul
        key="list-of-options"
      >
        <li
          key="[1,0]"
        >
          <Component
            name="Option 2-1"
            onSelect={[Function]}
            optionIndexes={
              Array [
                1,
                0,
              ]
            }
            schemaGroup={
              JsonSchemaAllOfGroup {
                "entries": Array [
                  JsonSchema {
                    "parserConfig": Object {},
                    "schema": Object {
                      "description": "Foobar",
                    },
                    "scope": RefScope {
                      "baseUri": null,
                      "externalRefs": Map {},
                      "internalRefs": Map {
                        "#" => [Circular],
                      },
                      "otherScopes": Array [],
                    },
                  },
                  JsonSchemaOneOfGroup {
                    "entries": Array [
                      JsonSchema {
                        "parserConfig": Object {},
                        "schema": Object {
                          "title": "Foo",
                        },
                        "scope": RefScope {
                          "baseUri": null,
                          "externalRefs": Map {},
                          "internalRefs": Map {
                            "#" => [Circular],
                          },
                          "otherScopes": Array [],
                        },
                      },
                      JsonSchemaAnyOfGroup {
                        "entries": Array [
                          JsonSchema {
                            "parserConfig": Object {},
                            "schema": Object {
                              "title": "Bar",
                            },
                            "scope": RefScope {
                              "baseUri": null,
                              "externalRefs": Map {},
                              "internalRefs": Map {
                                "#" => [Circular],
                              },
                              "otherScopes": Array [],
                            },
                          },
                          JsonSchema {
                            "parserConfig": Object {},
                            "schema": Object {
                              "description": "Baz",
                            },
                            "scope": RefScope {
                              "baseUri": null,
                              "externalRefs": Map {},
                              "internalRefs": Map {
                                "#" => [Circular],
                              },
                              "otherScopes": Array [],
                            },
                          },
                        ],
                        "settings": Object {
                          "groupTitle": "any of",
                        },
                      },
                    ],
                    "settings": Object {
                      "groupTitle": "one of",
                      "optionNameForIndex": [Function],
                    },
                  },
                ],
              }
            }
            selected={false}
          />
        </li>
        <li
          key="[1,1]"
        >
          <Component
            name="Option 2-2"
            onSelect={[Function]}
            optionIndexes={
              Array [
                1,
                1,
              ]
            }
            schemaGroup={
              JsonSchemaAllOfGroup {
                "entries": Array [
                  JsonSchema {
                    "parserConfig": Object {},
                    "schema": Object {
                      "description": "Foobar",
                    },
                    "scope": RefScope {
                      "baseUri": null,
                      "externalRefs": Map {},
                      "internalRefs": Map {
                        "#" => [Circular],
                      },
                      "otherScopes": Array [],
                    },
                  },
                  JsonSchemaOneOfGroup {
                    "entries": Array [
                      JsonSchema {
                        "parserConfig": Object {},
                        "schema": Object {
                          "title": "Foo",
                        },
                        "scope": RefScope {
                          "baseUri": null,
                          "externalRefs": Map {},
                          "internalRefs": Map {
                            "#" => [Circular],
                          },
                          "otherScopes": Array [],
                        },
                      },
                      JsonSchemaAnyOfGroup {
                        "entries": Array [
                          JsonSchema {
                            "parserConfig": Object {},
                            "schema": Object {
                              "title": "Bar",
                            },
                            "scope": RefScope {
                              "baseUri": null,
                              "externalRefs": Map {},
                              "internalRefs": Map {
                                "#" => [Circular],
                              },
                              "otherScopes": Array [],
                            },
                          },
                          JsonSchema {
                            "parserConfig": Object {},
                            "schema": Object {
                              "description": "Baz",
                            },
                            "scope": RefScope {
                              "baseUri": null,
                              "externalRefs": Map {},
                              "internalRefs": Map {
                                "#" => [Circular],
                              },
                              "otherScopes": Array [],
                            },
                          },
                        ],
                        "settings": Object {
                          "groupTitle": "any of",
                        },
                      },
                    ],
                    "settings": Object {
                      "groupTitle": "one of",
                      "optionNameForIndex": [Function],
                    },
                  },
                ],
              }
            }
            selected={false}
          />
        </li>
      </ul>
    </li>
  </ul>
</div>
`;
